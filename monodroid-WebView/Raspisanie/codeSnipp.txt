######################################################################
######################MainActivity.cs#################################
######################################################################
using System;
using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Webkit;
using Android.Widget;
using Android.OS;

namespace Raspisanie
{
	[Activity (Label = "Raspisanie", MainLauncher = true)]
	public class MainActivity : Activity
	{
		protected override void OnCreate (Bundle bundle)
		{
			base.OnCreate (bundle);

			// Set our view from the "main" layout resource
			SetContentView (Resource.Layout.Main);

			var webView = FindViewById<WebView> (Resource.Id.webView);
			webView.Settings.JavaScriptEnabled = true;

			// Use subclassed WebViewClient to intercept hybrid native calls
			webView.SetWebViewClient (new HybridWebViewClient ());

			// Render the view from the type generated from RazorView.cshtml
			var model = new Model1 () { Text = "Text goes here" };
			var template = new RazorView () { Model = model };
			var page = template.GenerateString ();

			// Load the rendered HTML into the view with a base URL 
			// that points to the root of the bundled Assets folder
			webView.LoadDataWithBaseURL ("file:///android_asset/", page, "text/html", "UTF-8", null);

		}

		private class HybridWebViewClient : WebViewClient
		{
			public override bool ShouldOverrideUrlLoading (WebView webView, string url)
			{

				// If the URL is not our own custom scheme, just let the webView load the URL as usual
				var scheme = "hybrid:";

				if (!url.StartsWith (scheme))
					return false;

				// This handler will treat everything between the protocol and "?"
				// as the method name.  The querystring has all of the parameters.
				var resources = url.Substring (scheme.Length).Split ('?');
				var method = resources [0];
				var parameters = System.Web.HttpUtility.ParseQueryString (resources [1]);

				if (method == "UpdateLabel") {
					var textbox = parameters ["textbox"];

					// Add some text to our string here so that we know something
					// happened on the native part of the round trip.
					var prepended = string.Format ("C# says \"{0}\"", textbox);

					// Build some javascript using the C#-modified result
					var js = string.Format ("SetLabelText('{0}');", prepended);

					webView.LoadUrl ("javascript:" + js);
				}

				return true;
			}
		}
	}
}

####################################################################
######################RazorView.cshtml##############################
####################################################################

@model Model1
<html>
	<head>
		<link rel="stylesheet" href="style.css" />
		<script type="text/javascript">
			
			// This javascript method calls C# by setting the browser 
			// to a URL with a custom scheme that is registered in C#.  
			// All values are sent to C# as part of the querystring  
			function InvokeCSharpWithFormValues(elm) {
				var qs = "";
				var elms = elm.form.elements;

				for (var i = 0; i < elms.length;i++) {
					qs += "&" + elms[i].name + "=" + elms[i].value;
				}

				if (elms.length > 0) 
					qs = qs.substring(1);

				location.href = "hybrid:" + elm.name + "?" + qs;
			}

			// This javascript method is called from C#
			function SetLabelText(text) {
				var elm = document.getElementById('label');
				elm.innerHTML = text;
			}
		</script>
	</head>
	<body>
		<div data-role="page" data-theme="b">
			<form>
				
				<div data-role="content">

					<h1 id="label">@Model.Text</h1>

					<input type="text" id="textbox" name="textbox" />

					<input type="button" name="UpdateLabel" value="Click" onclick="InvokeCSharpWithFormValues(this)" />

				</div>

			</form>
		</div>
	</body>
</html>	
